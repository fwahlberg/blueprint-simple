const express = require('express');
const router = express.Router();
const GuestList = require('../models/GuestList');
const Guest = require('../models/Guest'); // Ensure this path is correct
const {
  auth
} = require('../middleware/auth');


router.get('/', auth, async (req, res) => {
  try {
    const userId = req.user._id; // Ensure your authentication middleware sets `req.user`

    // Find all guest lists created by the authenticated user
    const guestLists = await GuestList.find({ user: userId }).populate('user');

    res.status(200).send(guestLists);
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});
// POST /api/guestlists to create a new guest list
router.post('/', auth, async (req, res) => {
  try {
    const { title } = req.body;

    // Create a new guest list instance
    // Invite code will be automatically generated by the pre-save hook
    const guestList = new GuestList({
      user: req.user._id, // Assuming `req.user` is populated by your auth middleware
      title,
    });

    // Save the guest list, triggering the pre-save hook for invite code generation
    await guestList.save();

    // The saved guest list now includes the unique invite code
    res.status(201).send(guestList);
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: 'Server error', error: error.message });
  }
});

// GET /api/guestlists/:guestListId to get a specific guest list along with its guests
router.get('/:guestListId', auth, async (req, res) => {
  try {
    const guestListId = req.params.guestListId;
    const userId = req.user._id; // Ensure your authentication middleware sets `req.user`

    // Find the guest list by ID and ensure it belongs to the authenticated user
    const guestList = await GuestList.findOne({ _id: guestListId, user: userId }).populate('guests'); // Adjust 'guests' path as needed

    if (!guestList) {
      return res.status(404).send({ message: "Guest list not found" });
    }

    res.status(200).send(guestList);
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});

router.get('/find/:inviteCode', async (req, res) => {
  const { inviteCode } = req.params;

  try {
    // Attempt to find the guest list by its invite code
    const guestList = await GuestList.findOne({ inviteCode: inviteCode }).exec();

    if (!guestList) {
      return res.status(404).send({ message: "Invite code is invalid or has expired." });
    }

    // Optionally, limit the information returned about the guest list
    // For example, you might not want to disclose the user ID or the guests array
    const guestListInfo = {
      title: guestList.title,
      // Include any other fields you want to return
    };

    res.status(200).send(guestListInfo);
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});


router.post('/join/:inviteCode', async (req, res) => {
  const { inviteCode } = req.params;
  const { fullName, email, phoneNumber, plusOnes } = req.body;

  try {
    // Find the guest list by invite code
    const guestList = await GuestList.findOne({ inviteCode: inviteCode }).exec();
    if (!guestList) {
      return res.status(404).send({ message: "Invite code is invalid or has expired." });
    }

    // Optional: Check if the guest has already been added to avoid duplicates
    const existingGuest = await Guest.findOne({ email: email, guestList: guestList._id }).exec();
    if (existingGuest) {
      return res.status(200).send({ message: "Successfully joined the guest list!"});
    }

    // Create a new guest document
    const newGuest = new Guest({
      fullName,
      email,
      phoneNumber,
      plusOnes,
      responded: true,
      guestList: guestList._id // Link the guest to the guest list
    });

    // Save the new guest
    await newGuest.save();

    // Update the GuestList document to include the new guest's ID
    // This step may not be necessary if you decide to only link from Guest to GuestList without a two-way link
    guestList.guests.push(newGuest._id);
    await guestList.save();

    res.status(201).send({ message: "Successfully joined the guest list!" });
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});

router.put('/guests/:guestId/arrive', auth, async (req, res) => {
  try {
    const { guestId } = req.params;
    const { plusOnesArrived } = req.body; // Accept plusOnesArrived from request body

    // Ensure that plusOnesArrived is not greater than the invited plusOnes
    const guest = await Guest.findById(guestId);
    if (!guest) {
      return res.status(404).send({ message: "Guest not found or you do not have permission." });
    }
    if (plusOnesArrived > guest.plusOnes) {
      return res.status(400).send({ message: "Cannot mark more plus ones as arrived than were invited." });
    }

    // Update the guest to mark as arrived along with the number of plus ones that arrived
    const updatedGuest = await Guest.findOneAndUpdate(
      { _id: guestId, guestList: { $in: (await GuestList.find({ user: req.user._id })).map(gl => gl._id) } },
      { hasArrived: true, arrivalTime: new Date(), plusOnesArrived },
      { new: true }
    );

    res.status(200).send(updatedGuest);
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});


router.delete('/:guestListId', auth, async (req, res) => {
  try {
    const { guestListId } = req.params;
    const userId = req.user._id; // Assuming req.user is populated from your authentication middleware

    const guestList = await GuestList.findOne({ _id: guestListId, user: userId });
    
    if (!guestList) {
      return res.status(404).send({ message: "GuestList not found or you do not have permission to delete it." });
    }
    console.log(guestList);
    await guestList.deleteOne(); // Cascading delete handled by pre-remove hook
    res.send({ message: "Guest list and all associated guests removed successfully." });
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Server error", error: error.message });
  }
});


module.exports = router;
